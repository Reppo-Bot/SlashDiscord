needs
- base class
    - add commands
    - handle discord connections
    - map commands to functions
    - entity structures for users, perms, etc
    - T E S T 
    - handle heartbeats
- steps
    - define commands
    - tell discord in batch request
    - after confirm, initiate connection request (socket) from bot

users concerns
- create commands
- push commands
- initiate connection

- easily repeatable


# example
from ourLib.client import Client, Command, Options, Interaction
from ourLib.command import SlashCommand, Option 

try:
    client = Client('token', intents=[])
catch Exception e:
    print(e)
    break

async def hello_handler(interaction: Interaction):
    interaction.reply('hello')


# 3 ways?
Command(name='Hello', ...)
client.push(commands)
or Client(token='token', intents=[], commands=[Command])


# discord slash commands
client.push(new Command(name='Hello', desc='I am a command', options=[stuff: Option], guild_id=123456, guild_ids, handler=hello_handler))

if !client.register():
    throw 'failed to register commands'

# event handling for discord
client.on('death', function)

if !client.connect():
    throw 'Failed to Connect'

client() # used to run the bot

class Client(Stack):
    # init
    command_dict
    event_dict
    
    runner()
    __call__():
        start connection
        initiate heartbeat with intents
        1. heartbeat
        2. check for events
        3. check for commands
        on error do webhook for death

class User

class Interaction

class Guild

static enum of intents

socket for connection

